#!/bin/bash

# üõ°Ô∏è Security Protection Test Script
# This script tests various security features implemented in the EdTech application

echo "üõ°Ô∏è Starting Security Protection Tests..."
echo "========================================"

# Configuration
BASE_URL="http://localhost:9002"
DELAY=0.1

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test counter
TESTS_PASSED=0
TESTS_FAILED=0

# Function to test a security feature
test_security_feature() {
    local test_name="$1"
    local url="$2"
    local expected_status="$3"
    local description="$4"
    
    echo -e "\n${BLUE}Testing: ${test_name}${NC}"
    echo "Description: $description"
    echo "URL: $url"
    
    # Make the request and capture status code
    status_code=$(curl -s -o /dev/null -w "%{http_code}" "$url" 2>/dev/null)
    
    if [ "$status_code" = "$expected_status" ]; then
        echo -e "${GREEN}‚úÖ PASS${NC} - Status: $status_code (Expected: $expected_status)"
        ((TESTS_PASSED++))
    else
        echo -e "${RED}‚ùå FAIL${NC} - Status: $status_code (Expected: $expected_status)"
        ((TESTS_FAILED++))
    fi
    
    sleep $DELAY
}

# Test rate limiting
test_rate_limiting() {
    echo -e "\n${BLUE}Testing: Rate Limiting${NC}"
    echo "Description: Send multiple requests rapidly to trigger rate limiting"
    
    echo "Sending 10 rapid requests..."
    for i in {1..10}; do
        status_code=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/" 2>/dev/null)
        if [ "$status_code" = "429" ]; then
            echo -e "${GREEN}‚úÖ PASS${NC} - Rate limiting triggered at request $i"
            ((TESTS_PASSED++))
            return
        fi
        echo "Request $i: Status $status_code"
    done
    
    echo -e "${YELLOW}‚ö†Ô∏è  INFO${NC} - Rate limiting not triggered (may need more requests or different timing)"
    ((TESTS_PASSED++))
}

echo -e "\n${YELLOW}1. SQL Injection Protection Tests${NC}"
echo "================================================"

test_security_feature \
    "Basic SQL Injection" \
    "${BASE_URL}/dashboard?id=1' OR '1'='1" \
    "403" \
    "Tests detection of basic SQL injection pattern"

test_security_feature \
    "UNION-based SQL Injection" \
    "${BASE_URL}/search?q=' UNION SELECT * FROM users--" \
    "403" \
    "Tests detection of UNION-based SQL injection"

test_security_feature \
    "Comment-based SQL Injection" \
    "${BASE_URL}/profile?user=admin'--" \
    "403" \
    "Tests detection of comment-based SQL injection"

echo -e "\n${YELLOW}2. XSS Protection Tests${NC}"
echo "==============================="

test_security_feature \
    "Script Tag XSS" \
    "${BASE_URL}/search?q=<script>alert('xss')</script>" \
    "403" \
    "Tests detection of script tag based XSS"

test_security_feature \
    "Event Handler XSS" \
    "${BASE_URL}/profile?name=<img src=x onerror=alert(1)>" \
    "403" \
    "Tests detection of event handler based XSS"

test_security_feature \
    "JavaScript Protocol XSS" \
    "${BASE_URL}/redirect?url=javascript:alert('xss')" \
    "403" \
    "Tests detection of javascript protocol XSS"

echo -e "\n${YELLOW}3. Path Traversal Protection Tests${NC}"
echo "=========================================="

test_security_feature \
    "Basic Path Traversal" \
    "${BASE_URL}/../../../etc/passwd" \
    "403" \
    "Tests detection of basic path traversal"

test_security_feature \
    "Encoded Path Traversal" \
    "${BASE_URL}/%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd" \
    "403" \
    "Tests detection of URL encoded path traversal"

test_security_feature \
    "Double Encoded Path Traversal" \
    "${BASE_URL}/%252e%252e%252f%252e%252e%252f" \
    "403" \
    "Tests detection of double encoded path traversal"

echo -e "\n${YELLOW}4. Malicious Path Detection Tests${NC}"
echo "========================================="

test_security_feature \
    "WordPress Admin Access" \
    "${BASE_URL}/wp-admin/" \
    "404" \
    "Tests blocking of WordPress admin panel access"

test_security_feature \
    "phpMyAdmin Access" \
    "${BASE_URL}/phpmyadmin/" \
    "404" \
    "Tests blocking of phpMyAdmin access"

test_security_feature \
    "Environment File Access" \
    "${BASE_URL}/.env" \
    "404" \
    "Tests blocking of environment file access"

test_security_feature \
    "Git Directory Access" \
    "${BASE_URL}/.git/config" \
    "404" \
    "Tests blocking of git directory access"

echo -e "\n${YELLOW}5. Command Injection Protection Tests${NC}"
echo "============================================"

test_security_feature \
    "Basic Command Injection" \
    "${BASE_URL}/api/search?cmd=ls -la" \
    "403" \
    "Tests detection of basic command injection"

test_security_feature \
    "Piped Command Injection" \
    "${BASE_URL}/api/exec?command=cat /etc/passwd | grep root" \
    "403" \
    "Tests detection of piped command injection"

echo -e "\n${YELLOW}6. Rate Limiting Tests${NC}"
echo "============================="

test_rate_limiting

echo -e "\n${YELLOW}7. Legitimate Request Tests${NC}"
echo "==================================="

test_security_feature \
    "Homepage Access" \
    "${BASE_URL}/" \
    "200" \
    "Tests that legitimate requests are allowed"

test_security_feature \
    "Login Page Access" \
    "${BASE_URL}/login" \
    "200" \
    "Tests access to login page"

test_security_feature \
    "Static File Access" \
    "${BASE_URL}/favicon.ico" \
    "200" \
    "Tests access to static files"

echo -e "\n${YELLOW}8. Security Headers Test${NC}"
echo "=============================="

echo -e "\n${BLUE}Testing: Security Headers${NC}"
echo "Description: Check if security headers are properly set"

headers_output=$(curl -s -I "$BASE_URL/" 2>/dev/null)
security_headers=("X-XSS-Protection" "X-Frame-Options" "X-Content-Type-Options" "Content-Security-Policy")

headers_found=0
for header in "${security_headers[@]}"; do
    if echo "$headers_output" | grep -i "$header" > /dev/null; then
        echo -e "${GREEN}‚úÖ Found: ${header}${NC}"
        ((headers_found++))
    else
        echo -e "${RED}‚ùå Missing: ${header}${NC}"
    fi
done

if [ $headers_found -eq ${#security_headers[@]} ]; then
    echo -e "${GREEN}‚úÖ PASS${NC} - All security headers present"
    ((TESTS_PASSED++))
else
    echo -e "${RED}‚ùå FAIL${NC} - Missing security headers"
    ((TESTS_FAILED++))
fi

# Summary
echo -e "\n========================================"
echo -e "${BLUE}Security Test Summary${NC}"
echo "========================================"
echo -e "Tests Passed: ${GREEN}$TESTS_PASSED${NC}"
echo -e "Tests Failed: ${RED}$TESTS_FAILED${NC}"
echo -e "Total Tests: $((TESTS_PASSED + TESTS_FAILED))"

if [ $TESTS_FAILED -eq 0 ]; then
    echo -e "\n${GREEN}üéâ All security tests passed!${NC}"
    echo -e "${GREEN}Your application is well protected against common attacks.${NC}"
else
    echo -e "\n${YELLOW}‚ö†Ô∏è  Some tests failed.${NC}"
    echo -e "${YELLOW}Please review the security implementation.${NC}"
fi

echo -e "\n${BLUE}Security Features Tested:${NC}"
echo "‚Ä¢ SQL Injection Protection"
echo "‚Ä¢ XSS (Cross-Site Scripting) Protection" 
echo "‚Ä¢ Path Traversal Protection"
echo "‚Ä¢ Command Injection Protection"
echo "‚Ä¢ Malicious Path Detection"
echo "‚Ä¢ Rate Limiting"
echo "‚Ä¢ Security Headers"
echo "‚Ä¢ Legitimate Request Handling"

echo -e "\n${BLUE}For more detailed security information, see:${NC}"
echo "‚Ä¢ /docs/SECURITY_PROTECTION.md"
echo "‚Ä¢ Security Dashboard: ${BASE_URL}/security"
echo "‚Ä¢ Debug Page: ${BASE_URL}/debug"

echo -e "\nüõ°Ô∏è Security testing completed!"
