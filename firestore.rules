rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for role checking
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isTeacher() {
      return request.auth.token.role == 'teacher';
    }
    
    function isAdmin() {
      return request.auth.token.role == 'admin';
    }
    
    function hasRoleInToken() {
      return 'role' in request.auth.token;
    }

    // Users collection - for user profiles
    match /users/{userId} {
      // Allow authenticated users to read and write their own profile
      allow read, write: if isAuthenticated() && isOwner(userId);
      // Allow creating initial user profile for new Google sign-ins
      allow create: if isAuthenticated() && isOwner(userId) && !exists(/databases/$(database)/documents/users/$(userId));
      // Allow teachers and admins to read user profiles
      allow read: if isAuthenticated() && hasRoleInToken() && (isTeacher() || isAdmin());
    }

    // Students collection - users can only access their own data
    match /students/{studentId} {
      allow read, write: if isAuthenticated() && isOwner(studentId);
      allow read: if isAuthenticated() && hasRoleInToken() && (isTeacher() || isAdmin());
    }
    
    // Learning progress - students can only access their own progress
    match /learningProgress/{progressId} {
      allow read, write: if isAuthenticated() && 
        isOwner(resource.data.userId);
      allow read: if isAuthenticated() && hasRoleInToken() && (isTeacher() || isAdmin());
      allow write: if isAuthenticated() && hasRoleInToken() && isTeacher();
    }
    
    // Exam results - students can read their own results, teachers can manage all
    match /examResults/{resultId} {
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.studentId) || (hasRoleInToken() && (isTeacher() || isAdmin())));
      allow write: if isAuthenticated() && hasRoleInToken() && (isTeacher() || isAdmin());
    }
    
    // Student activities - logging and reading with proper permissions
    match /studentActivities/{activityId} {
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.userId) || (hasRoleInToken() && (isTeacher() || isAdmin())));
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update, delete: if isAuthenticated() && hasRoleInToken() && (isTeacher() || isAdmin());
    }
    
    // Tutoring sessions - participants can read and write
    match /tutoringSessions/{sessionId} {
      allow read, write: if isAuthenticated() && 
        (isOwner(resource.data.studentId) || 
         isOwner(resource.data.tutorId) || 
         (hasRoleInToken() && (isTeacher() || isAdmin())));
      
      // Messages within tutoring sessions
      match /messages/{messageId} {
        allow read, write: if isAuthenticated();
      }
    }
    
    // Leaderboard - read-only for students, writable by teachers/admins
    match /leaderboard/{entry} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && hasRoleInToken() && (isTeacher() || isAdmin());
    }
    
    // Class notes and educational content
    match /classNotes/{noteId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && hasRoleInToken() && (isTeacher() || isAdmin());
    }
    
    // Recommendations - users can read their own, teachers can manage
    match /recommendations/{recId} {
      allow read: if isAuthenticated() && 
        (isOwner(resource.data.userId) || (hasRoleInToken() && (isTeacher() || isAdmin())));
      allow write: if isAuthenticated() && hasRoleInToken() && (isTeacher() || isAdmin());
    }
    
    // Contest data - read-only for students
    match /contests/{contestId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && hasRoleInToken() && (isTeacher() || isAdmin());
    }
    
    // Library books and resources
    match /libraryBooks/{bookId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && hasRoleInToken() && (isTeacher() || isAdmin());
    }
  }
}
